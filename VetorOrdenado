public class VetorOrdenado {

    private int capacidade;
    private int ultima_posicao;
    private int[] valores;

    public VetorOrdenado(int capacidade) {
        this.capacidade = capacidade;
        this.ultima_posicao = -1;
        this.valores = new int[capacidade];
    }

    public void imprimir(){
        if(ultima_posicao == -1){
            System.out.println("O vetor está vazio");
        } else {
            for(int i = 0; i < ultima_posicao + 1; i++){
                System.out.println(i + "-" + valores[i]);
            }
        }

    }

    public int inserir(int valor){
        if( ultima_posicao ==  capacidade - 1) {
            System.out.println("Capacidade maxima atiginda!");
            return 0;
        }

        int posicao = 0;

        for(int i = 0; i < ultima_posicao + 1; i++){
            posicao = i;
            if(valores[i] > valor){
                break;
            }
            if(i == ultima_posicao){
                posicao = i + 1;
            }
        }

        int x = ultima_posicao;

        while(x >= posicao){
            valores[x + 1] = valores[x];
            x -= 1;

        }

        valores[posicao] = valor;
        ultima_posicao += 1;
        return 0;
    }

    public int pesquisar_linear(int valor) {
        for (int i = 0; i < ultima_posicao + 1; i++) {
            if (valores[i] > valor) {
                return -1;
            }
            if (valores[i] == valor) {
                return i;
            }
            if (i == ultima_posicao) {
                return -1;
            }
        }
        return -1; // Caso não encontre
    }

    public int pesquisa_binaria(int valor) {
        int limite_inferior = 0;
        int limite_superior = ultima_posicao;

        while (true) {
            int posicao_atual = (int) ((limite_inferior + limite_superior) / 2);

            if (valores[posicao_atual] == valor) {
                return posicao_atual;
            } else if (limite_inferior > limite_superior) {
                return -1;
            } else {
                if (valores[posicao_atual] < valor) {
                    limite_inferior = posicao_atual + 1;
                } else {
                    limite_superior = posicao_atual - 1;
                }
            }
        }
    }

    public int excluir(int valor) {
        int posicao = pesquisar_linear(valor);

        if (posicao == -1) {
            return -1;
        } else {
            for (int i = posicao; i < ultima_posicao; i++) {
                valores[i] = valores[i + 1];
            }
            ultima_posicao -= 1;
            return 0;
        }
    }







}
